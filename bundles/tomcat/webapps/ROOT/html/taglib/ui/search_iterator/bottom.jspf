<%--
/**
 * SPDX-FileCopyrightText: (c) 2000 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */
--%>

		<c:if test="<%= paginate %>">
			<div class="taglib-search-iterator-page-iterator-bottom">
				<liferay-ui:search-paginator
					id='<%= id + "PageIteratorBottom" %>'
					markupView="<%= markupView %>"
					searchContainer="<%= searchContainer %>"
					type="<%= type %>"
				/>
			</div>
		</c:if>
	</div>
</div>

<c:if test="<%= Validator.isNotNull(id) %>">
	<input id="<%= namespace + id %>PrimaryKeys" name="<%= namespace + id %>PrimaryKeys" type="hidden" value="" />

	<%
	String modules = "liferay-search-container";
	String rowCheckerRowSelector = StringPool.BLANK;

	if (rowMover != null) {
		modules += ",liferay-search-container-move";
	}

	if (rowChecker != null) {
		modules += ",liferay-search-container-select";

		rowCheckerRowSelector = rowChecker.getRowSelector();

		if (Validator.isNull(rowCheckerRowSelector)) {
			rowCheckerRowSelector = "[data-selectable=\"true\"]";
		}
	}
	%>

	<aui:script use="<%= modules %>">
		var plugins = [];

		var rowSelector = '<%= rowHtmlTag %><%= rowCheckerRowSelector %>';

		<c:if test="<%= rowChecker != null %>">
			var rememberCheckBoxState = <%= rowChecker.isRememberCheckBoxState() %>;

			<c:if test="<%= rowChecker.isRememberCheckBoxState() && Validator.isNotNull(rowChecker.getRememberCheckBoxStateURLRegex()) %>">
				rememberCheckBoxState = '<%= rowChecker.getRememberCheckBoxStateURLRegex() %>';
			</c:if>

			plugins.push(
				{
					cfg: {
						keepSelection: rememberCheckBoxState,
						rowClassNameActive: '<%= displayStyle.equals(SearchIteratorTag.DEFAULT_DISPLAY_STYLE) ? "table-active" : "active" %>',
						rowSelector: rowSelector
					},
					fn: A.Plugin.SearchContainerSelect
				}
			);
		</c:if>

		<c:if test="<%= rowMover != null %>">
			var rowMoverConfig = <%= rowMover.toJSON().toString() %>;

			rowMoverConfig.rowSelector = rowSelector + rowMoverConfig.rowSelector;

			plugins.push(
				{
					cfg: rowMoverConfig,
					fn: A.Plugin.SearchContainerMove
				}
			);
		</c:if>

		var searchContainer = new Liferay.SearchContainer(
			{
				id: '<%= namespace + id %>',
				plugins: plugins
			}
		).render();

		<c:if test="<%= fixedHeader && displayStyle.equals(SearchIteratorTag.DEFAULT_DISPLAY_STYLE) %>">
			var inModal = window !== Liferay.Util.getOpener();

			var initFixedHeaderSync = function() {
				var contentBox = searchContainer.get('contentBox');

				var fixedHeader = document.getElementById('<%= namespace + id %>fixedHeader');

				if (contentBox) {
					var mainContent = contentBox.ancestor('#main-content');
					var horizontalScrollingContainer = document.querySelector('.lfr-search-container-fixed-first-column .table-responsive');
					var fixedHeaderScrollingContainer = document.querySelector('.lfr-search-iterator-fixed-header-inner-wrapper');

					if (mainContent && horizontalScrollingContainer && fixedHeaderScrollingContainer) {
						var verticalScrollingContainer = inModal ? mainContent._node : window;

						var table = fixedHeader.parentElement.parentElement;
						var trDomRect = fixedHeader.previousElementSibling.getBoundingClientRect();

						var syncScrollingContainers = function(event) {
							fixedHeaderScrollingContainer.scrollLeft = horizontalScrollingContainer.scrollLeft;
						}

						var fixedHeaderEventHandler = function(event) {
							var scrollTop = verticalScrollingContainer.scrollTop;
							var trDomRecTop = trDomRect.top;

							if (fixedHeader.classList.contains('hide') && (scrollTop >= trDomRecTop)) {
								fixedHeader.classList.remove('hide');

								syncScrollingContainers();
							}
							else if (verticalScrollingContainer.scrollTop < trDomRecTop) {
								fixedHeader.classList.add('hide');
							}
						};

						verticalScrollingContainer.addEventListener('scroll', fixedHeaderEventHandler);

						horizontalScrollingContainer.addEventListener('scroll', syncScrollingContainers);

						Liferay.on(
							'destroyPortlet',
							function() {
								verticalScrollingContainer.removeEventListener('scroll', fixedHeaderEventHandler);
								horizontalScrollingContainer.removeEventListener('scroll', syncScrollingContainers);
							}
						);
					}
				}
			}

			if (inModal) {
				Liferay.Util.getOpener().Liferay.on('modalIframeLoaded', function() {
					initFixedHeaderSync();
				});
			}
			else {
				initFixedHeaderSync();
			}
		</c:if>

		searchContainer.updateDataStore(<%= primaryKeysJSONArray.toString() %>);

		var destroySearchContainer = function(event) {
			if (event.portletId === '<%= portletDisplay.getRootPortletId() %>') {
				searchContainer.destroy();

				Liferay.detach('destroyPortlet', destroySearchContainer);
			}
		};

		Liferay.on('destroyPortlet', destroySearchContainer);
	</aui:script>
</c:if>